

@inject NavigationManager navigationManager
@inject IToastService toastService
@inject IMapper mapper
@inject PersonRepository repository
@inject ILocalizer<Translations> localizer

<EditForm Model="@updateModel" OnValidSubmit="@Update" class="form w-100">
    <FluentValidationValidator/>
    <Modal Width="mw-900px">
        <ModalSubTitle>Edit an existing @EntityName.ToLower()</ModalSubTitle>
        <ModalBody>

            <div class="row">
                <div class="col-xl-4 col-lg-6 mb-5">
                    <InputLabel Value="@localizer["gender"]" Required="true"/>
                    <SfDropDownList TValue="Gender" TItem="string" Placeholder="Select an option..." @bind-Value="@updateModel.Gender" DataSource="@genders"/>
                    <ValidationMessage For="@(() => updateModel.Gender)"/>
                </div>
                <div class="col-xl-4 col-lg-6 mb-5">
                    <InputLabel Value="@localizer["first_name"]" Required="true"/>
                    <InputTextField class="form-control form-control-lg form-control-solid" @bind-Value="@updateModel.FirstName"/>
                    <ValidationMessage For="@(() => updateModel.FirstName)"/>
                </div>
                <div class="col-xl-4 col-lg-6 mb-5">
                    <InputLabel Value="@localizer["prefix"]" Required="false"/>
                    <InputTextField class="form-control form-control-lg form-control-solid" @bind-Value="@updateModel.Prefix"/>
                    <ValidationMessage For="@(() => updateModel.Prefix)"/>
                </div>
            </div>
            <div class="row">
                <div class="col-12 mb-5">
                    <InputLabel Value="@localizer["last_name"]" Required="true"/>
                    <InputTextField class="form-control form-control-lg form-control-solid" @bind-Value="@updateModel.LastName"/>
                    <ValidationMessage For="@(() => updateModel.LastName)"/>
                </div>
            </div>
            <div class="row">
                <div class="col-12 mb-5">
                    <InputLabel Value="Email" Required="false"/>
                    <InputTextField class="form-control form-control-lg form-control-solid" @bind-Value="@updateModel.EmailAddress"/>
                    <ValidationMessage For="@(() => updateModel.EmailAddress)"/>
                </div>
            </div>
            <div class="row">
                <div class="col-12 mb-5">
                    <InputLabel Value="@localizer["phone_number"]" Required="false"/>
                    <InputTextField class="form-control form-control-lg form-control-solid" @bind-Value="@updateModel.PhoneNumber"/>
                    <ValidationMessage For="@(() => updateModel.PhoneNumber)"/>
                </div>
                <div class="col-12 mb-5">
                    <InputLabel Value="@localizer["nationality"]" Required="false"/>
                    <InputTextField class="form-control form-control-lg form-control-solid" @bind-Value="@updateModel.Nationality"/>
                    <ValidationMessage For="@(() => updateModel.Nationality)"/>
                </div>
                <div class="col-12 mb-5">
                    <InputLabel Value="@localizer["date_of_birth"]" Required="false"/>
                    <SfDatePicker @bind-Value="@updateModel.DateOfBirth" Placeholder="Select a birthdate..." ShowTodayButton="false" Format="dd-MM-yyyy" />
                    <ValidationMessage For="@(() => updateModel.DateOfBirth)"/>
                </div>
                <div class="col-12 mb-5">
                    <InputLabel Value="@localizer["country_of_birth"]" Required="false"/>
                    <InputTextField class="form-control form-control-lg form-control-solid" @bind-Value="@updateModel.CountryOfBirth"/>
                    <ValidationMessage For="@(() => updateModel.CountryOfBirth)"/>
                </div>
                <div class="row">
                    <div class="col-xl-3 col-lg-6 mb-5">
                        <div class="form-check form-check-custom form-check-solid">
                            <input class="form-check-input" type="checkbox" @bind="@updateModel.SchoolGoing">
                            <label class="form-check-label flex-grow-1">@localizer["family_number_of_school_going"]</label>
                        </div>
                    </div>
                    <div class="col-xl-3 col-lg-6 mb-5">
                        <div class="form-check form-check-custom form-check-solid">
                            <input class="form-check-input" type="checkbox" @bind="@updateModel.LeftHome">
                            <label class="form-check-label flex-grow-1">@localizer["left_home"]</label>
                        </div>
                    </div>
                    <div class="col-xl-2 col-lg-6 mb-5">
                        <div class="form-check form-check-custom form-check-solid">
                            <input class="form-check-input" type="checkbox" @bind="@updateModel.InActive">
                            <label class="form-check-label flex-grow-1">@localizer["inactive"]</label>
                        </div>
                    </div>

                </div>

            </div>
        </ModalBody>
        <ModalFooter>
            <SpinnerSubmitButton Loading="@isSubmitting" LoadingText="Saving..." IdleText="Save" Icon="save" Size="md" Color="light-primary" Margins="false"/>
        </ModalFooter>
    </Modal>
</EditForm>

@code
{
        private const string EntityName = "Persoon";

    [CascadingParameter]
    public BlazoredModalInstance Modal { get; set; } = null!;

    [Parameter]
    public PersonViewModel Model { get; set; } = null!;

    private PersonUpdateModel updateModel = null!;
    private bool isSubmitting;
    private readonly string[] genders = Enum.GetNames<Gender>();

    protected override void OnInitialized()
    {
        updateModel = mapper.Map<PersonUpdateModel>(Model);
    }

    private async Task Update()
    {
        if (isSubmitting)
        {
            return;
        }

        isSubmitting = true;

        try
        {
            var model = await repository.Update(updateModel);
            toastService.ShowUpdated(EntityName);
            await Modal.CloseAsync(ModalResult.Ok(model));
        }
        catch (Exception)
        {
            toastService.ShowUnexpectedError();
        }

        isSubmitting = false;
    }

}