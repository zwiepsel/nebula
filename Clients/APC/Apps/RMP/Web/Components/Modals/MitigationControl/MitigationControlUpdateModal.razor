@inject NavigationManager navigationManager
@inject IToastService toastService
@inject IMapper mapper
@inject MitigationControlRepository repository

<EditForm Model="@updateModel" OnValidSubmit="@Update" class="form w-100">
    <FluentValidationValidator/>
    <Modal>
        <ModalSubTitle>Edit an existing @EntityName.ToLower()</ModalSubTitle>
        <ModalBody>
            <div class="mb-5">
                <InputLabel Value="Name" Required="true"/>
                <InputTextField class="form-control form-control-lg form-control-solid" @bind-Value="@updateModel.Name"/>
                <ValidationMessage For="@(() => updateModel.Name)"/>
            </div>
            <div class="mb-5">
                <InputLabel Value="Short name" Required="true"/>
                <InputTextField class="form-control form-control-lg form-control-solid" @bind-Value="@updateModel.ShortName"/>
                <ValidationMessage For="@(() => updateModel.ShortName)"/>
            </div>
            <div class="mb-5">
                <InputLabel Value="Description" Required="true"/>
                <InputTextField class="form-control form-control-lg form-control-solid" @bind-Value="@updateModel.Description"/>
                <ValidationMessage For="@(() => updateModel.Description)"/>
            </div>
            <div class="mb-5">
                <InputLabel Value="Control type" Required="true"/>
                <SfDropDownList TValue="MitigationControlType?" TItem="string" Placeholder="Select an option..." @bind-Value="@updateModel.ControlType" DataSource="@mitigationControlTypes"/>
                <ValidationMessage For="@(() => updateModel.ControlType)"/>
            </div>
            <div class="mb-5">
                <InputLabel Value="Trigger" Required="true"/>
                <SfDropDownList TValue="MitigationControlTrigger?" TItem="string" Placeholder="Select an option..." @bind-Value="@updateModel.Trigger" DataSource="@mitigationControlTriggers"/>
                <ValidationMessage For="@(() => updateModel.Trigger)"/>
            </div>
        </ModalBody>
        <ModalFooter>
            <SpinnerSubmitButton Loading="@isSubmitting" LoadingText="Saving..." IdleText="Save" Icon="save" Size="md" Color="light-primary" Margins="false"/>
        </ModalFooter>
    </Modal>
</EditForm>

@code
{

        private const string EntityName = "Mitigation control";

    [CascadingParameter]
    public BlazoredModalInstance Modal { get; set; } = null!;

    [Parameter]
    public MitigationControlViewModel Model { get; set; } = null!;

    private MitigationControlUpdateModel updateModel = null!;
    private bool isSubmitting;

    private readonly string[] mitigationControlTypes = Enum.GetNames<MitigationControlType>();
    private readonly string[] mitigationControlTriggers = Enum.GetNames<MitigationControlTrigger>();

    protected override void OnInitialized()
    {
        updateModel = mapper.Map<MitigationControlUpdateModel>(Model);
    }

    private async Task Update()
    {
        if (isSubmitting)
        {
            return;
        }

        isSubmitting = true;

        try
        {
            var model = await repository.Update(updateModel);
            toastService.ShowUpdated(EntityName);
            await Modal.CloseAsync(ModalResult.Ok(model));
        }
        catch (Exception)
        {
            toastService.ShowUnexpectedError();
        }

        isSubmitting = false;
    }

}