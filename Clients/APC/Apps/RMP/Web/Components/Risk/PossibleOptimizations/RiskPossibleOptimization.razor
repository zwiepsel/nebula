@inject IJSRuntime jsRuntime
@inject IToastService toastService
@inject IMapper mapper
@inject RiskRepository riskRepository

<div class="card w-100">
    <div class="d-flex align-items-center border-bottom max-height-66">
        <div class="ps-8 pt-8 pb-8">
        </div>
        <div class="fs-4 fw-bolder text-gray-900 w-100 d-flex align-items-center ">
            Possible optimization details
        </div>
        <div class="ms-auto d-flex p-8 bd-highlight">
            <div class="d-flex btn btn-sm btn-icon btn-active-light-primary" @onclick="@Close">
                <span class="svg-icon svg-icon-2">
                    <i class="fal fa-times"></i>
                </span>
            </div>
        </div>
    </div>
    <div class="card-body">
        <Spinner Loading="@(updateModel == null)">
            <EditForm Model="@updateModel" class="form">
                <FluentValidationValidator/>
                <div class="mb-5">
                    <span class="d-flex flex-column">
                        <span class="fw-bolder fs-6 text-muted">Name</span>
                        <span class="fw-bolder fs-6">@RiskPossibleOptimizationModel.MitigationControl.Name</span>
                    </span>
                </div>
                <div class="mb-5">
                    <span class="d-flex flex-column">
                        <span class="fw-bolder fs-6 text-muted">Short name</span>
                        <span class="fw-bolder fs-6">@RiskPossibleOptimizationModel.MitigationControl.ShortName</span>
                    </span>
                </div>
                <div class="mb-5">
                    <span class="d-flex flex-column">
                        <span class="fw-bolder fs-6 text-muted">Description</span>
                        <span class="fw-bolder fs-6">@RiskPossibleOptimizationModel.MitigationControl.Description</span>
                    </span>
                </div>
                <div class="mb-5">
                    <span class="d-flex flex-column">
                        <span class="fw-bolder fs-6 text-muted">Control type</span>
                        <span class="fw-bolder fs-6">@RiskPossibleOptimizationModel.MitigationControl.ControlType</span>
                    </span>
                </div>
                <div class="mb-5">
                    <span class="d-flex flex-column">
                        <span class="fw-bolder fs-6 text-muted">Trigger</span>
                        <span class="fw-bolder fs-6">@RiskPossibleOptimizationModel.MitigationControl.Trigger</span>
                    </span>
                </div>
                <div class="mb-5">
                    <span class="d-flex flex-column">
                        <span class="fw-bolder fs-6 text-muted">Score</span>
                        <SfDropDownList @bind-Value="@updateModel!.Score" TValue="RiskMitigationControlScore" TItem="string" Placeholder="Select an option..." AllowFiltering="true" DataSource="@riskMitigationControlScores">
                            <DropDownListEvents TValue="RiskMitigationControlScore" TItem="string" ValueChange="@Save"></DropDownListEvents>
                        </SfDropDownList>
                        <ValidationMessage For="@(() => updateModel!.Score)"/>
                    </span>
                </div>
            </EditForm>
        </Spinner>
    </div>
</div>

@code {

    [Parameter]
    public RiskPossibleOptimizationViewModel RiskPossibleOptimizationModel { get; set; } = null!;

    [Parameter]
    public IList<RiskPossibleOptimizationViewModel> RiskPossibleOptimizationModels { get; set; } = null!;

    [Parameter]
    public EventCallback<IList<RiskPossibleOptimizationViewModel>> RiskPossibleOptimizationModelsChanged { get; set; }

    private bool isSubmitting;
    private RiskPossibleOptimizationUpdateModel? updateModel;
    private readonly string[] riskMitigationControlScores = Enum.GetNames<RiskMitigationControlScore>();

    protected override void OnParametersSet()
    {
        updateModel = mapper.Map<RiskPossibleOptimizationUpdateModel>(RiskPossibleOptimizationModel);
    }

    private async Task Save()
    {
        if (isSubmitting)
        {
            return;
        }

        isSubmitting = true;

        try
        {
            await riskRepository.UpdateRiskPossibleOptimization(RiskPossibleOptimizationModel.Id, updateModel!);
            toastService.ShowUpdated("Possible optimization");

            var index = RiskPossibleOptimizationModels.FindIndex(rmc => rmc.Id == updateModel!.Id);

            if (index >= 0)
            {
                RiskPossibleOptimizationModels[index] = mapper.Map(updateModel, RiskPossibleOptimizationModel);
            }

            if (RiskPossibleOptimizationModelsChanged.HasDelegate)
            {
                await RiskPossibleOptimizationModelsChanged.InvokeAsync(RiskPossibleOptimizationModels);
            }
        }
        catch (HttpRequestException)
        {
            toastService.ShowUnexpectedError();
        }

        isSubmitting = false;
    }

    private async Task Close()
    {
        await jsRuntime.InvokeVoidAsync("OffCanvasHide", "possible-optimization-view", true);
    }

}