// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nebula.Core.Api.Infrastructure.Data;

#nullable disable

namespace Nebula.Core.Api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20211015202202_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-rc.2.21480.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.App", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("SiteId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Apps", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("AppsHistory");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            Id = 100,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            DisplayName = "Risks",
                            Icon = "exclamation-triangle",
                            Name = "RMP",
                            Path = "risk",
                            SiteId = 100,
                            SystemName = "Nebula.Clients.APC.Apps.RMP.Web"
                        },
                        new
                        {
                            Id = 101,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            DisplayName = "Portal",
                            Icon = "browser",
                            Name = "Portal",
                            Path = "",
                            SiteId = 101,
                            SystemName = "Nebula.Clients.FCB.Apps.Portal.Web"
                        },
                        new
                        {
                            Id = 102,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            DisplayName = "Portal",
                            Icon = "browser",
                            Name = "Portal",
                            Path = "",
                            SiteId = 102,
                            SystemName = "Nebula.Clients.ETB.Apps.Portal.Web"
                        });
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Clients", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("ClientsHistory");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Name = "Nebula",
                            SystemName = "Nebula.Core"
                        },
                        new
                        {
                            Id = 100,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Name = "APC",
                            SystemName = "Nebula.Clients.APC"
                        },
                        new
                        {
                            Id = 101,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Name = "FCB",
                            SystemName = "Nebula.Clients.FCB"
                        },
                        new
                        {
                            Id = 102,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Name = "ETB",
                            SystemName = "Nebula.Clients.ETB"
                        });
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Roles", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("RolesHistory");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "45259485-d1d5-4243-bfb3-45504d0bbb56",
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Name = "System",
                            NormalizedName = "SYSTEM",
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "911fc7a1-9bd3-442d-b929-f760d2ae2e53",
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "044e410d-bc1d-41f6-a724-4fd5c74d4476",
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Name = "User",
                            NormalizedName = "USER",
                            Type = 2
                        },
                        new
                        {
                            Id = 100,
                            ConcurrencyStamp = "47bd56db-7d7d-453e-8350-6ba99960f58d",
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Name = "Site administrator",
                            NormalizedName = "SITE ADMINISTRATOR",
                            Type = 3
                        },
                        new
                        {
                            Id = 101,
                            ConcurrencyStamp = "cdc86c09-09db-43e1-975a-180447a88157",
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Name = "Site user",
                            NormalizedName = "SITE USER",
                            Type = 3
                        });
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("RoleClaimsHistory");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Users", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("UsersHistory");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "085a2c29-ace5-48a8-b4f0-742304158add",
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Email = "system@businessone.cw",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Nebula",
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSTEM@BUSINESSONE.CW",
                            NormalizedUserName = "SYSTEM@BUSINESSONE.CW",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "system@businessone.cw"
                        },
                        new
                        {
                            Id = 100,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8570a2c7-2da7-41cd-ac0c-0f654cd5bf31",
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Email = "administrator@businessone.cw",
                            EmailConfirmed = true,
                            FirstName = "Administrator",
                            LastName = "BusinessOne",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@BUSINESSONE.CW",
                            NormalizedUserName = "ADMINISTRATOR@BUSINESSONE.CW",
                            PasswordHash = "AQAAAAEAACcQAAAAENP+voY7BPrALMrBrKrBE1wGFXDmodhklDx/wlAiThn3AJjtL5hYOVWN12mgxopdnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "administrator@businessone.cw"
                        },
                        new
                        {
                            Id = 101,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de064ac8-6fd1-4df4-aced-dfa3f15e03c1",
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Email = "user@businessone.cw",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "BusinessOne",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@BUSINESSONE.CW",
                            NormalizedUserName = "USER@BUSINESSONE.CW",
                            PasswordHash = "AQAAAAEAACcQAAAAEAOh8U2eFldDdoPChBXD0VRY32Xibx79juEAgfjxkBJTaqHCzF/v6Wzgo+Q1pX8X6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user@businessone.cw"
                        },
                        new
                        {
                            Id = 102,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9baa00dd-b371-4907-bb93-1bcbb1b84862",
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Email = "site-administrator@businessone.cw",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SITE-ADMINISTRATOR@BUSINESSONE.CW",
                            NormalizedUserName = "SITE-ADMINISTRATOR@BUSINESSONE.CW",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "site-administrator@businessone.cw"
                        },
                        new
                        {
                            Id = 103,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ac1f949-3734-493c-a044-01a36e32d755",
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Email = "site-user@businessone.cw",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SITE-USER@BUSINESSONE.CW",
                            NormalizedUserName = "SITE-USER@BUSINESSONE.CW",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "site-user@businessone.cw"
                        });
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("UserClaimsHistory");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("UserLoginsHistory");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("UserRolesHistory");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 100,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 101,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 102,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 103,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("UserTokensHistory");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("Core")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int?>("Port")
                        .HasColumnType("int");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Sites", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("SitesHistory");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Core = true,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Host = "core.nebula.local",
                            Name = "Nebula",
                            Port = 5000,
                            SystemName = "Nebula.Core.Web"
                        },
                        new
                        {
                            Id = 100,
                            ClientId = 100,
                            Core = false,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Host = "apc.nebula.local",
                            Name = "APC",
                            Port = 5000,
                            SystemName = "Nebula.Clients.APC.Sites.APC"
                        },
                        new
                        {
                            Id = 101,
                            ClientId = 101,
                            Core = false,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Host = "fcb.nebula.local",
                            Name = "FCB",
                            Port = 5000,
                            SystemName = "Nebula.Clients.FCB.Sites.FCB"
                        },
                        new
                        {
                            Id = 102,
                            ClientId = 102,
                            Core = false,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            Host = "etb.nebula.local",
                            Name = "ETB",
                            Port = 5000,
                            SystemName = "Nebula.Clients.ETB.Sites.ETB"
                        });
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.SiteUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("RoleId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("SiteUsers", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb.UseHistoryTable("SiteUsersHistory");
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            FirstName = "Administrator",
                            LastName = "BusinessOne",
                            RoleId = 100,
                            SiteId = 1,
                            UserId = 100
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            FirstName = "Administrator",
                            LastName = "BusinessOne",
                            RoleId = 100,
                            SiteId = 100,
                            UserId = 100
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            FirstName = "Administrator",
                            LastName = "BusinessOne",
                            RoleId = 100,
                            SiteId = 101,
                            UserId = 100
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            FirstName = "Administrator",
                            LastName = "BusinessOne",
                            RoleId = 100,
                            SiteId = 102,
                            UserId = 100
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            FirstName = "User",
                            LastName = "BusinessOne",
                            RoleId = 101,
                            SiteId = 1,
                            UserId = 101
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            FirstName = "Site administrator (APC)",
                            LastName = "BusinessOne",
                            PasswordHash = "AQAAAAEAACcQAAAAEIq8kl+RItbRKz9hrQwIYxpsc2CQP7lUZ10242cpV6uXnTqc53KN36uEWK8gw4/CyQ==",
                            RoleId = 100,
                            SecurityStamp = "D9B9F40F64258F66220218F8E85B25F66B947C5D49FE98C27D837F7CEFC3381B",
                            SiteId = 100,
                            UserId = 102
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            FirstName = "Site administrator (FCB)",
                            LastName = "BusinessOne",
                            PasswordHash = "AQAAAAEAACcQAAAAEPxpHAV+dAU2cxTXhidQ6rBnpvtv4VZSmPHCQqHjKkWibfQm3+SnrmrPl0gXivn2bQ==",
                            RoleId = 100,
                            SecurityStamp = "1CB76A52D8AC60FF271CA61106927A1383D992D5550E8AC3DC1BF9946295ABC5",
                            SiteId = 101,
                            UserId = 102
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            FirstName = "Site administrator (ETB)",
                            LastName = "BusinessOne",
                            PasswordHash = "AQAAAAEAACcQAAAAEFPs6VNMT+futnQWGdqSYY/uEp03kHMhYt7YJL6vAvE7Rqj8O9PKRwad6jqwKvWcTA==",
                            RoleId = 100,
                            SecurityStamp = "3DF8673BA5388C97F0E3F83A9B04E043C16AC82DE3A89BB4207950D0A38DA02D",
                            SiteId = 102,
                            UserId = 102
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            FirstName = "Site user (APC)",
                            LastName = "BusinessOne",
                            PasswordHash = "AQAAAAEAACcQAAAAECQdSqII5YPEsOfMtLG3+wvsQT+Y/P0ibLjy6NXEnz3P6fZbIMxHoYRDIHui4eG4Hg==",
                            RoleId = 101,
                            SecurityStamp = "75E694718E73A10E26EA47F0A00E61917554C640D055C6058F6538EA9443D961",
                            SiteId = 100,
                            UserId = 103
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            FirstName = "Site user (FCB)",
                            LastName = "BusinessOne",
                            PasswordHash = "AQAAAAEAACcQAAAAEL2QpE3uxqkSE9rSf4F5bAAERM6oZa9RW+bqYq6JX112fhD5gK5ZZQt5tcmHUdcv+w==",
                            RoleId = 101,
                            SecurityStamp = "3F6A8A0F2BEA8E1AC050CD3E340DBE11F4CA7D7547D4E32A361EFEBDDFC54861",
                            SiteId = 101,
                            UserId = 103
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 1,
                            Deleted = false,
                            FirstName = "Site user (ETB)",
                            LastName = "BusinessOne",
                            PasswordHash = "AQAAAAEAACcQAAAAEN5OqJ7WGYzTUwZom0i4t8zKVna41CAmUix7sduH1xX/5SfS6MWxHHL5wu4Ae/hWZw==",
                            RoleId = 101,
                            SecurityStamp = "CF78A1C6F506990EFDFEC96C1295CE81C978951A80659E88D5D131E6561E8388",
                            SiteId = 102,
                            UserId = 103
                        });
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.App", b =>
                {
                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Site", "Site")
                        .WithMany("Apps")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Site");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Client", b =>
                {
                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.Role", b =>
                {
                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.RoleClaim", b =>
                {
                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.User", b =>
                {
                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.UserClaim", b =>
                {
                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.UserLogin", b =>
                {
                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.UserToken", b =>
                {
                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Site", b =>
                {
                    b.HasOne("Nebula.Core.Api.Domain.Entities.Client", "Client")
                        .WithMany("Sites")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Client");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.SiteUser", b =>
                {
                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Site", "Site")
                        .WithMany("SiteUsers")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Nebula.Core.Api.Domain.Entities.Identity.User", "User")
                        .WithMany("SiteUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Role");

                    b.Navigation("Site");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Client", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("SiteUsers");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Nebula.Core.Api.Domain.Entities.Site", b =>
                {
                    b.Navigation("Apps");

                    b.Navigation("SiteUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
