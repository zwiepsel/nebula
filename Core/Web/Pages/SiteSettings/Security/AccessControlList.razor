@page "/settings/security/access-control-list"
@attribute [Authorize(Policy = SiteAdministratorRequirement.Name)]

@inject IModalService modalService
@inject IToastService toastService
@inject AppState appState
@inject SiteSettingsGroupRepository siteSettingsGroupRepository
@inject SiteSettingsPermissionRepository siteSettingsPermissionRepository

<SettingPage ContainerSize="fluid">
    <PageSubHeader>
        <SubHeader>
            <Navigation>
                <ul class="nav nav-tabs nav-line-tabs nav-line-tabs-2x fs-6 mt-3">
                    <li class="nav-item">
                        <a style="height: 43px;" class="fw-bold text-dark nav-link active" href="/settings/security/access-control-list">Access control list</a>
                    </li>
                    <li class="nav-item">
                        <a style="height: 43px;" class="fw-bold text-dark nav-link" href="/settings/security/group">Groups</a>
                    </li>
                    <li class="nav-item">
                        <a style="height: 43px;" class="fw-bold text-dark nav-link" href="/settings/security/permission">Permissions</a>
                    </li>
                </ul>
            </Navigation>
        </SubHeader>
    </PageSubHeader>
    <PageBody>
        <div class="card">
            <Spinner Loading="@(groups == null && permissions == null)" Mode="@SpinnerMode.Overlay">
                @if (groups!.Any() && permissions!.Any())
                {
                    <div class="card-header border-0 pt-6">
                        <div class="card-title">
                            <div class="d-flex align-items-center position-relative my-1">
                                <span class="svg-icon svg-icon-1 position-absolute ms-4">
                                    <i class="fal fa-search"></i>
                                </span>
                                <input type="text" class="form-control form-control-solid w-250px ps-14" placeholder="Search" @bind-value="@searchText" @bind-value:event="oninput" @onkeyup="@Search">
                            </div>
                        </div>
                    </div>
                    <div class="card-body pt-0">
                        @if (filteredPermissions.Any())
                        {
                            <table class="table table-hover table-borderless g-5 m-0">
                                <thead>
                                <tr class="fw-bolder">
                                    <th>Permission</th>
                                    @foreach (var group in groups!)
                                    {
                                        <th class="text-center">@group.Name</th>
                                    }
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var permission in filteredPermissions)
                                {
                                    <tr>
                                        <td class="align-middle">@permission.Name</td>
                                        @foreach (var group in groups)
                                        {
                                            var index = $"group:{group.Id}-permission:{permission.Id}";

                                            if (!permissionCheckboxValues.ContainsKey(index))
                                            {
                                                permissionCheckboxValues.Add(index, group.Permissions.Any(p => p.Id == permission.Id));
                                            }

                                            <td class="text-center align-middle">
                                                <label class="form-check form-check-inline form-check-solid p-0 m-0">
                                                    <input class="form-check-input m-0" type="checkbox" @bind="@permissionCheckboxValues[index]" @onclick="@(() => UpdatePermission(index, permission, group))" disabled="@isSubmitting"/>
                                                </label>
                                            </td>
                                        }
                                    </tr>
                                }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p class="mt-3 mb-0">No permissions found.</p>
                        }
                    </div>
                }
                else
                {
                    <div class="card-body">
                        <p class="mb-0">No groups and/or permissions defined yet.</p>
                    </div>
                }
            </Spinner>
        </div>
    </PageBody>
</SettingPage>

@code {

    private IList<GroupViewModel>? groups;
    private IList<PermissionViewModel>? permissions;
    private IList<PermissionViewModel> filteredPermissions = new List<PermissionViewModel>();

    private bool isSubmitting;
    private string? searchText;
    private readonly Dictionary<string, bool> permissionCheckboxValues = new();

    protected override async Task OnInitializedAsync()
    {
        groups = await siteSettingsGroupRepository.GetGroupsBySite(appState.Site.Id);
        permissions = await siteSettingsPermissionRepository.GetPermissionsBySite(appState.Site.Id);
        filteredPermissions = permissions;
    }

    private async Task UpdatePermission(string index, PermissionViewModel permissionViewModel, GroupViewModel groupViewModel)
    {
        if (isSubmitting)
        {
            return;
        }

        isSubmitting = true;

        try
        {
            var hasPermission = permissionCheckboxValues[index];

            if (hasPermission)
            {
                await siteSettingsGroupRepository.RevokePermission(appState.Site.Id, groupViewModel.Id, permissionViewModel.Id);
                toastService.ShowSuccess($"Permission revoked from group '{groupViewModel.Name}'.");
            }
            else
            {
                await siteSettingsGroupRepository.GrantPermission(appState.Site.Id, groupViewModel.Id, permissionViewModel.Id);
                toastService.ShowSuccess($"Permission granted to group '{groupViewModel.Name}'.");
            }
        }
        catch (Exception)
        {
    // ignored
        }

        isSubmitting = false;
    }

    private void Search()
    {
        if (searchText != null)
        {
            filteredPermissions = permissions!.Where(permission => permission.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            filteredPermissions = permissions!;
        }
    }

}