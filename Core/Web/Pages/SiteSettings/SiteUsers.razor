@page "/settings/site-user"
@attribute [Authorize(Policy = SiteAdministratorRequirement.Name)]

@inject IModalService modalService
@inject AppState appState
@inject SiteSettingsSiteUserRepository repository

<SettingPage ContainerSize="fluid">
    <PageSubHeader>
        <SubHeader Title="@Title" Icon="@Icon">
            <Toolbar>
                <SpinnerButton Loading="false" IdleText="@CreateButtonIdleText" LoadingText="Creating..." Size="sm" Icon="plus" Color="light-primary" Margins="false" Method="@ShowCreateModal"/>
            </Toolbar>
        </SubHeader>
    </PageSubHeader>
    <PageBody>
        <div class="card">
            <Spinner Loading="@(models == null)" Mode="@SpinnerMode.Overlay">
                <div class="card-header border-0 pt-6">
                    <div class="card-title">
                        <div class="d-flex align-items-center position-relative my-1">
                            <span class="svg-icon svg-icon-1 position-absolute ms-4">
                                <i class="fal fa-search"></i>
                            </span>
                            <input type="text" class="form-control form-control-solid w-250px ps-14" placeholder="Search" @bind-value="@searchText" @bind-value:event="oninput" @onkeyup="@SearchGrid">
                        </div>
                    </div>
                </div>
                <div class="card-body pt-0">
                    <SfGrid @ref="@grid" DataSource="@models" AllowSorting="true" AllowPaging="true">
                        <GridEvents RowSelected="@ShowUpdateModal" TValue="SiteUserViewModel"/>
                        <GridColumns>
                            <GridColumn Field="@nameof(SiteUserViewModel.Id)" HeaderText="Id"/>
                            <GridColumn Field="@nameof(SiteUserViewModel.FirstName)" HeaderText="First name"/>
                            <GridColumn Field="@nameof(SiteUserViewModel.LastName)" HeaderText="Last name"/>
                            <GridColumn Field="@nameof(SiteUserViewModel.EmailAddress)" HeaderText="Email address"/>
                            <GridColumn Field="Role.Name" HeaderText="Role"/>
                        </GridColumns>
                    </SfGrid>
                </div>
            </Spinner>
        </div>
    </PageBody>
</SettingPage>

@code {

        private const string Title = "Users";
        private const string Icon = "users";
        private const string EntityName = "user";
        private const string CreateButtonIdleText = $"New {EntityName}";

    private SfGrid<SiteUserViewModel> grid = null!;
    private IList<SiteUserViewModel>? models;
    private string? searchText;

    protected override async Task OnInitializedAsync()
    {
        models = await repository.GetSiteUsersBySite(appState.Site.Id);
    }

    private void SearchGrid()
    {
        grid.Search(searchText);
    }

    private async Task ShowCreateModal()
    {
        var modal = modalService.Show<SiteUserCreateModal>($"New {EntityName}");
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            models!.Add((SiteUserViewModel)result.Data);
            grid.Refresh();
        }
    }

    private async Task ShowUpdateModal(RowSelectEventArgs<SiteUserViewModel> args)
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add("Model", args.Data);

        var modal = modalService.Show<SiteUserUpdateModal>($"Edit {EntityName}", modalParameters);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            var model = (SiteUserViewModel)result.Data;
            var index = models!.FindIndex(m => m.Id == model.Id);

            if (index >= 0)
            {
                models![index] = model;
                grid.Refresh();
            }
        }
    }

}