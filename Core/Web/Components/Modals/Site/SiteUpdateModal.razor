@inject NavigationManager navigationManager
@inject IToastService toastService
@inject IMapper mapper
@inject SiteRepository repository
@inject ClientRepository clientRepository

<EditForm Model="@updateModel" OnValidSubmit="@Update" class="form w-100">
    <FluentValidationValidator/>
    <Modal>
        <ModalSubTitle>Edit an existing @EntityName.ToLower()</ModalSubTitle>
        <ModalBody>
            <div class="mb-5">
                <InputLabel Value="Name" Required="true"/>
                <InputTextField class="form-control form-control-lg form-control-solid" @bind-Value="@updateModel.Name"/>
                <ValidationMessage For="@(() => updateModel.Name)"/>
            </div>
            <div class="mb-5">
                <InputLabel Value="System name" Required="true"/>
                <InputTextField class="form-control form-control-lg form-control-solid" @bind-Value="@updateModel.SystemName"/>
                <ValidationMessage For="@(() => updateModel.SystemName)"/>
            </div>
            <div class="mb-5">
                <InputLabel Value="Host" Required="true"/>
                <InputTextField class="form-control form-control-lg form-control-solid" @bind-Value="@updateModel.Host"/>
                <ValidationMessage For="@(() => updateModel.Host)"/>
            </div>
            <div class="mb-5">
                <InputLabel Value="Port"/>
                <InputNumber class="form-control form-control-lg form-control-solid" @bind-Value="@updateModel.Port"/>
                <ValidationMessage For="@(() => updateModel.Port)"/>
            </div>
            <div class="mb-5">
                <div class="form-check form-switch form-check-custom form-check-solid justify-content-between px-0">
                    <label class="form-check-label fw-bolder ms-0" for="@nameof(updateModel.AllowPublicRegistration)">
                        Allow public registration
                    </label>
                    <InputCheckbox class="form-check-input" id="@nameof(updateModel.AllowPublicRegistration)" @bind-Value="@updateModel.AllowPublicRegistration"/>
                </div>
                <div class="text-muted">Allow public registration on this site.</div>
                <ValidationMessage For="@(() => updateModel.AllowPublicRegistration)"/>
            </div>
            <div class="mb-5">
                <InputLabel Value="Client" Required="true"/>
                <SfDropDownList @bind-Value="@updateModel.ClientId" TValue="int" TItem="ClientViewModel" Placeholder="Select a client..." AllowFiltering="true" DataSource="@clients">
                    <DropDownListFieldSettings Text="Name" Value="Id"/>
                </SfDropDownList>
                <ValidationMessage For="@(() => updateModel.ClientId)"/>
            </div>
        </ModalBody>
        <ModalFooter>
            <SpinnerSubmitButton Loading="@isSubmitting" LoadingText="Saving..." IdleText="Save" Icon="save" Size="md" Color="light-primary" Margins="false"/>
        </ModalFooter>
    </Modal>
</EditForm>

@code
{

        private const string EntityName = "Site";

    [CascadingParameter]
    public BlazoredModalInstance Modal { get; set; } = null!;

    [Parameter]
    public SiteViewModel Model { get; set; } = null!;

    private SiteUpdateModel updateModel = new();
    private IList<ClientViewModel>? clients;
    private bool isSubmitting;

    protected override async Task OnInitializedAsync()
    {
        clients = await clientRepository.GetAll();
        updateModel = mapper.Map<SiteUpdateModel>(Model);
    }

    private async Task Update()
    {
        if (isSubmitting)
        {
            return;
        }

        isSubmitting = true;

        try
        {
            var model = await repository.Update(updateModel);
            toastService.ShowUpdated(EntityName);
            await Modal.CloseAsync(ModalResult.Ok(model));
        }
        catch (Exception)
        {
            toastService.ShowUnexpectedError();
        }

        isSubmitting = false;
    }

}